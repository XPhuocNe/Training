/*..........................................................................................................................................................................*/
// Link problem 1: https://oj.vnoi.info/problem/bedao_g01_kprime
// Code solution: 
#include <bits/stdc++.h>
#define NAME "XPhuoc"

using namespace std;

#define X first
#define Y second
#define pb push_back
#define Fort(i, a, b) for (int i = (a), _b = (b); i <= _b; i++)
#define Ford(i, a, b) for (int i = (a), _b = (b); i >= _b; i--)

typedef pair<int, int> pairII;
typedef pair<int, long long> pairIL;

template <typename T>
    bool minimize(T &x, T y)
    {
        if (x <= y)
            return 0;

        x = y;
        return 1;
    }

/*..............................................................................................................................................*/

const int P = 1e7 + 27;

bitset<P + 7> sieve;

int n, k;

vector<int> prime;

void Eratosthenes()
{
    prime.push_back(0);
    prime.push_back(2);

    sieve.set(2);
    for(int x = 3; x <= P; x += 2)
        sieve.set(x);

    int SP = sqrt(P);

    for(int x = 3; x <= P; x += 2)
        if (sieve[x])
        {
            prime.push_back(x);

            if (x > SP)
                continue;

            for(int y = x * x; y <= P; y += 2 * x)
                sieve.reset(y);
        }
}

void Read()
{
    cin >> n >> k;
}

void init()
{

}

void Solve()
{
    Eratosthenes();

    long long result = 0;

    Fort(x, k, prime.size() - 1)
    {
        if (prime[x] > n) break;

        long long r = min(n + 1, prime[x + 1]) - prime[x];
        long long l = prime[x - k + 1];

        result += l * r;
    }

    cout << result << "\n";
}

int main()
{
    ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);

    #ifndef ONLINE_JUDGE
        freopen(NAME".INP", "r", stdin);
        freopen(NAME".OUT", "w", stdout);
    #endif // ONLINE_JUDGE

    int TEST = 1;

    if (TEST == 0)
        cin >> TEST;

    while (TEST--)
    {
        Read();
        init();
        Solve();
    }

    return 0;
}


/*..........................................................................................................................................................................*/
// Link problem 2: https://oj.vnoi.info/problem/bedao_g01_seqgame
// Code solution: 
#include <bits/stdc++.h>
#define NAME "XPhuoc"

using namespace std;

#define X first
#define Y second
#define pb push_back
#define Fort(i, a, b) for (int i = (a), _b = (b); i <= _b; i++)
#define Ford(i, a, b) for (int i = (a), _b = (b); i >= _b; i--)

typedef pair<int, int> pairII;
typedef pair<int, long long> pairIL;

template <typename T>
    bool minimize(T &x, T y)
    {
        if (x <= y)
            return 0;

        x = y;
        return 1;
    }

/*..............................................................................................................................................*/

const int N = 1e5;
const long long INF = 1e18;

int n;
long long a[N + 7];

int m;

struct operation
{
    int l, r;
    long long d;

    operation(int _l, int _r, long long _d):
        l(_l), r(_r), d(_d) {};
};

struct SegmentTree
{
    int n;
    long long *a;

    int I;
    vector<int> low, high;
    vector<long long> laz, node;

    void build(int id, int l, int r)
    {
        low[id] = l;
        high[id] = r;

        if (l == r)
        {
            node[id] = a[r];

            return ;
        }

        int mid = (l + r) / 2;

        build(id * 2, l, mid);
        build(id * 2 + 1, mid + 1, r);

        node[id] = max(node[id * 2], node[id * 2 + 1]);
    }

    SegmentTree(int _n, long long _a[]): n(_n)
    {
        a = _a;

        I = 4 * N;

        low.resize(I);
        high.resize(I);

        node.resize(I);
        laz.resize(I);

        build(1, 1, n);
    }

    void down(int id)
    {
        int val = laz[id];
        laz[id] = 0;

        if (val == 0)
            return ;

        Fort(x, id * 2, id * 2 + 1)
        {
            laz[x] += val;
            node[x] += val;
        }

    }

    void update(int id, int u, int v, long long val)
    {
        if (low[id] > v || high[id] < u)
            return ;

        if (u <= low[id] && high[id] <= v)
        {
            laz[id] += val;
            node[id] += val;

            return ;
        }

        down(id);

        update(id * 2, u, v, val);
        update(id * 2 + 1, u, v, val);

        node[id] = max(node[id * 2], node[id * 2 + 1]);
    }

    long long query(int id, int u, int v)
    {
        if (low[id] > v || high[id] < u)
            return -INF;

        if (u <= low[id] && high[id] <= v)
            return node[id];

        down(id);

        return max(query(id * 2, u, v), query(id * 2 + 1, u, v));
    }

};


void Read()
{
    cin >> n;
}

void init()
{
    vector<operation> oper;

    cin >> m;

    Fort(i, 1, m)
    {
        int l, r;
        long long d;

        cin >> l >> r >> d;

        a[l] += d;
        a[r + 1] -= d;

        oper.push_back({l, r, d});
    }

    a[0] = 0;

    Fort(i, 1, n)
        a[i] += a[i - 1];

    SegmentTree ST(n, a);

    long long result = INF;

    for(operation ptr : oper)
    {
        int l = ptr.l;
        int r = ptr.r;

        long long d = ptr.d;

        ST.update(1, l, r, -d);

        result = min(result, ST.query(1, 1, n));

        ST.update(1, l, r, d);
    }

    cout << result << "\n";
}

void Solve()
{

}

int main()
{
    ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);

    #ifndef ONLINE_JUDGE
        freopen(NAME".INP", "r", stdin);
        freopen(NAME".OUT", "w", stdout);
    #endif // ONLINE_JUDGE

    int TEST = 1;

    if (TEST == 0)
        cin >> TEST;

    while (TEST--)
    {
        Read();
        init();
        Solve();
    }

    return 0;
}
/*..........................................................................................................................................................................*/
// Link problem 3: https://oj.vnoi.info/problem/bedao_g01_distr
// Code solution: #include <bits/stdc++.h>
#define NAME "XPhuoc"

using namespace std;

#define X first
#define Y second
#define pb push_back
#define Fort(i, a, b) for (int i = (a), _b = (b); i <= _b; i++)
#define Ford(i, a, b) for (int i = (a), _b = (b); i >= _b; i--)

typedef pair<int, int> pairII;
typedef pair<int, long long > pairIL;

const long long MOD = 1e9 + 7;

template <typename T>
    bool maximize(T &x, T y)
    {
        if (x > y || x == y)
            return 0;

        x = y;
        return 1;
    }

template <typename T>
    bool minimize(T &x, T y)
    {
        if (x <= y)
            return 0;

        x = y;
        return 1;
    }

template <typename T>
    void total(T &x, T y)
    {
        x += y;
        x %= MOD;

        x += MOD;
        x %= MOD;
    }

/*..............................................................................................................................................*/

const int N = 1e5;

int n;
string S;

int zF[N + 7];
long long res[N + 7];

int k;

void ZFunction()
{
    zF[1] = n;
    zF[n + 1] = 0;

    int l = 1, r = 1;

    Fort(i, 2, n)
        if (r < i)
        {
            l = i, r = i;

            while (r <= n && S[r] == S[r - l + 1])
                r++;

            zF[i] = r - l;
            r--;
        }
        else
        {
            if (zF[i - l + 1] < r - l + 1) zF[i] = zF[i - l + 1];
            else
            {
                l = i, r = i;

                while (r <= n && S[r] == S[r - l + 1])
                    r++;

                zF[i] = r - l;
                r--;
            }
        }
}

void Read()
{
    cin >> n >> k;

    cin >> S;

    n = S.size();
    S = ' ' + S;
}

void init()
{

}


bool checkCase(int x)
{
    for(int i = 0; i < k; i++)
        if (zF[i * x + 1] < x) return 0;

    return 1;
}

void Solve()
{
    ZFunction();

    Fort(x, 1, n / k)
        if (checkCase(x))
        {
            int l = x * k;
            int r = min(n, l + min(zF[x * k + 1], x));

            res[l]++;
            res[r + 1]--;
        }

    long long result = 0;

    Fort(i, 1, n)
    {
        res[i] += res[i - 1];

        result += res[i] > 0;
    }

    cout << result << "\n";
}
int main()
{
    ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);

    #ifndef ONLINE_JUDGE
        freopen(NAME".INP", "r", stdin);
        freopen(NAME".OUT", "w", stdout);
    #endif // ONLINE_JUDGE

    int TEST = 1;

    if (TEST == 0)
        cin >> TEST;

    while (TEST--)
    {
        Read();
        init();
        Solve();
    }

    return 0;
}
/*..........................................................................................................................................................................*/

