/*........................................................................................................................................................................................................*/
// Link problem 1: https://oj.vnoi.info/problem/bedao_g02_schedule
// Code solution:

#include <bits/stdc++.h>
#define NAME "XPhuoc"

using namespace std;

#define X first
#define Y second
#define pb push_back
#define Fort(i, a, b) for (int i = (a), _b = (b); i <= _b; i++)
#define Ford(i, a, b) for (int i = (a), _b = (b); i >= _b; i--)

typedef pair<int, int> pairII;
typedef pair<int, long long > pairIL;

template <typename T>
    bool minimize(T &x, T y)
    {
        if (x <= y)
            return 0;

        x = y;
        return 1;
    }

/*..............................................................................................................................................*/

struct works
{
    int bonus, time;

    works(int _bonus = 0, int _time = 0):
        bonus(_bonus), time(_time) {};

    bool const operator < (const works &other)
    {
      /*  if (bonus == other.bonus)
            return time < other.time;*/

        return bonus > other.bonus;
    }
};

const int N = 1e5;

int n, m;
works work[N + 7];

int a[N + 7];
bool used[N + 7];

int range;
int bit[N + 7];

void Read()
{
    cin >> n >> m;

    Fort(i, 1, n)
        cin >> work[i].bonus >> work[i].time;
}

void update(int x, int val)
{
    for(; x <= range; x += x & -x)
        bit[x] += val;
}

int get(int x)
{
    if (x < 1)
        return 0;

    int res = 0;

    for(; x > 0; x -= x & -x)
        res += bit[x];

    return res;
}

int query(int l, int r)
{
    if (l > r)
        return 0;

    return get(r) - get(l - 1);
}

int last(int n)
{
    if (n < 0)
        return -1;

    n = min(range, n);

    if (get(n) == n)
        return -1;

    int res = -1;

    int l = 1, r = n;

    while (l <= r)
    {
        int m = (l + r) / 2;

        if (n - m > query(m + 1, n))
            l = m + 1;
        else
        {
            r = m - 1;
            res = m;
        }
    }

    return res;
}

void Solve()
{
    sort(work + 1, work + n + 1);

    range = min(n + 1, m + 1);

    long long result = 0;

    Fort(i, 1, n)
    {
        int bonus = work[i].bonus;
        int time = work[i].time;

        int u = last(m - time + 1);

 //       cout << bonus << " " << time << " " << u << "\n";

        if (u != -1)
        {
            result += bonus;
            update(u, 1);
        }
    }

    cout << result << "\n";
}

int main()
{
    ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);

    #ifndef ONLINE_JUDGE
        freopen(NAME".INP", "r", stdin);
        freopen(NAME".OUT", "w", stdout);
    #endif // ONLINE_JUDGE

    int TEST = 1;

    if (TEST == 0)
        cin >> TEST;

    while (TEST--)
    {
        Read();
        Solve();
    }

    return 0;
}
/*........................................................................................................................................................................................................*/
